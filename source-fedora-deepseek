#!/usr/bin/env python3
"""
Source-Fedora: Fedora → Source-Based Distribution with Gentoo-Style USE flags & make.conf
Version 5.0.0 (2025-06-07)
"""

import argparse
import configparser
import hashlib
import json
import logging
import os
import re
import shutil
import subprocess
import sys
import tempfile
import threading
from collections import defaultdict
from copy import deepcopy
from pathlib import Path
from typing import Dict, List, Optional, Set

# ─── Configuration Defaults ───────────────────────────────────────────────────
BASE = {
    "system": {
        "arch": subprocess.check_output(["uname", "-m"], text=True).strip(),
        "fedora_version": 42,
        "base_image": "registry.fedoraproject.org/fedora:42",
        "build_root": "/var/lib/source-fedora",
        "rpmbuild_root": "/var/lib/rpmbuild",
        "state_file": "/var/lib/source-fedora/state.json",
        "use_flags_dir": "/etc/source-fedora/use_flags.d",
        "accept_keywords": "/etc/source-fedora/accept_keywords",
        "make_conf": "/etc/source-fedora/make.conf",
    },
    "repos": {
        "fedora": ["fedora", "fedora-updates", "fedora-rawhide"],
        "rpmfusion": ["rpmfusion-free", "rpmfusion-nonfree"],
        "copr": ["copr:copr.fedorainfracloud.org:group:custom"],
    },
    "build": {
        "parallel_jobs": "auto",
        "backend": "buildah",
        "exclude": ["kernel*", "firmware*", "grub*", "shim*"],
        "default_use": ["X", "alsa", "network"],
        "unstable_kw": ["~git", "~rawhide"],
    },
}


# ─── Utilities ────────────────────────────────────────────────────────────────
def run(cmd, **kw):
    logging.debug(f"+ {' '.join(cmd)}")
    return subprocess.run(cmd, check=False, **kw)


def must_run(cmd, **kw):
    logging.debug(f"+ {' '.join(cmd)}")
    subprocess.run(cmd, check=True, **kw)


# ─── ConfigManager ────────────────────────────────────────────────────────────
class ConfigManager:
    def __init__(self):
        self.raw = deepcopy(BASE)
        self._load_user_conf()
        self._load_make_conf()
        self._load_use_flags()
        self._load_accept_keywords()

    def _load_user_conf(self):
        path = Path("/etc/source-fedora.conf")
        if not path.exists():
            return
        cp = configparser.ConfigParser()
        cp.read(path)
        for section in cp.sections():
            for key, val in cp[section].items():
                if section in self.raw and key in self.raw[section]:
                    # Try cast type
                    orig = self.raw[section][key]
                    self.raw[section][key] = (
                        type(orig)(val) if not isinstance(orig, list) else val.split()
                    )

    def _load_make_conf(self):
        self.make_conf: Dict[str, str] = {}
        p = Path(self.raw["system"]["make_conf"])
        if p.exists():
            for ln in p.read_text().splitlines():
                ln = ln.strip()
                if ln and not ln.startswith("#") and "=" in ln:
                    k, v = ln.split("=", 1)
                    self.make_conf[k] = v
        # defaults
        self.make_conf.setdefault("CFLAGS", "-O2 -pipe")
        self.make_conf.setdefault("CXXFLAGS", self.make_conf["CFLAGS"])
        if "MAKEOPTS" not in self.make_conf:
            nj = self.njobs
            self.make_conf["MAKEOPTS"] = f"-j{nj}"

    def _load_use_flags(self):
        self.use_flags: Dict[str, List[str]] = {}
        default = self.raw["build"]["default_use"]
        self.use_flags["global"] = default
        d = Path(self.raw["system"]["use_flags_dir"])
        if d.exists():
            for f in d.glob("*.conf"):
                self.use_flags[f.stem] = f.read_text().split()

    def _load_accept_keywords(self):
        self.accept: Set[str] = set()
        p = Path(self.raw["system"]["accept_keywords"])
        if p.exists():
            for ln in p.read_text().splitlines():
                ln = ln.strip()
                if ln and not ln.startswith("#"):
                    self.accept.add(ln)

    @property
    def njobs(self):
        pj = self.raw["build"]["parallel_jobs"]
        return os.cpu_count() if pj == "auto" else int(pj)


# ─── SourceManager ────────────────────────────────────────────────────────────
class SourceManager:
    def __init__(self, cfg: ConfigManager):
        self.cfg = cfg
        self.cache = Path(cfg.raw["system"]["build_root"]) / "cache"
        self.cache.mkdir(parents=True, exist_ok=True)

    def query(self, pkg: str) -> List[dict]:
        cmd = ["dnf", "repoquery", "--quiet", "--qf", "json", "-C", pkg]
        for grp in self.cfg.raw["repos"].values():
            for r in grp:
                cmd += ["--repo", r]
        res = run(cmd, stdout=subprocess.PIPE, text=True)
        return json.loads(res.stdout) if res.stdout else []

    def pick_best(self, info: List[dict], name: str) -> Optional[dict]:
        # filter excluded
        info = [
            p
            for p in info
            if not any(re.match(x, p["name"]) for x in self.cfg.raw["build"]["exclude"])
        ]
        best = None
        for p in info:
            kw = p.get("keywords", "").split()
            if (
                any(u in kw for u in self.cfg.raw["build"]["unstable_kw"])
                and name not in self.cfg.accept
            ):
                continue
            pri = 0
            rp = p.get("repo", "").lower()
            if "git" in p.get("release", ""):
                pri = 1000
            elif "rawhide" in rp:
                pri = 900
            elif "updates-testing" in rp:
                pri = 800
            else:
                pri = 600
            vcmp = 0
            if best:
                # compare version
                c = run(
                    ["rpmdev-vercmp", p["version"], best["version"]],
                    stdout=subprocess.DEVNULL,
                )
                if c.returncode == 11:
                    vcmp = 1
                elif c.returncode == 12:
                    vcmp = -1
            if not best or pri > best["_pri"] or (pri == best["_pri"] and vcmp > 0):
                p["_pri"] = pri
                best = p
        return best

    def fetch_srpm(self, pkg_info: dict) -> Path:
        name = pkg_info["name"]
        key = f"{name}-{pkg_info['version']}-{pkg_info['release']}"
        h = hashlib.sha256(key.encode()).hexdigest()
        out = self.cache / f"{h}.src.rpm"
        if out.exists():
            return out
        # SRPM
        must_run(
            [
                "dnf",
                "download",
                "--source",
                "--destdir",
                str(self.cache),
                f"{name}-{pkg_info['version']}-{pkg_info['release']}",
            ]
        )
        found = list(self.cache.glob(f"{name}-*.src.rpm"))
        if not found:
            raise FileNotFoundError(f"SRPM for {name} not found")
        found[0].rename(out)
        return out


# ─── BuildManager ────────────────────────────────────────────────────────────
class BuildManager:
    def __init__(self, cfg: ConfigManager, src: SourceManager):
        self.cfg, self.src = cfg, src
        self.state_lock = threading.Lock()
        self.state = self._load_state()

    def _load_state(self):
        p = Path(self.cfg.raw["system"]["state_file"])
        if p.exists():
            return json.loads(p.read_text())
        return {"built": {}}

    def _save_state(self):
        p = Path(self.cfg.raw["system"]["state_file"])
        with self.state_lock:
            p.write_text(json.dumps(self.state, indent=2))

    def deps(self, srpm: Path) -> Set[str]:
        out = run(["rpm", "-qpR", str(srpm)], stdout=subprocess.PIPE, text=True)
        reqs = set()
        for ln in out.stdout.splitlines():
            pkg = ln.split()[0]
            if pkg.startswith("rpmlib(") or pkg.startswith("/"):
                continue
            if any(re.match(x, pkg) for x in self.cfg.raw["build"]["exclude"]):
                continue
            reqs.add(pkg)
        return reqs

    def build_pkg(self, name: str):
        if name in self.state["built"]:
            return
        info = self.src.pick_best(self.src.query(name), name)
        if not info:
            logging.warning(f"{name}: no candidate")
            return
        srpm = self.src.fetch_srpm(info)
        # dependencies
        ds = self.deps(srpm)
        for d in ds:
            self.build_pkg(d)
        # build
        bd = Path(self.cfg.raw["system"]["build_root"]) / name
        bd.mkdir(parents=True, exist_ok=True)
        # create container, install rpm-build, copy srpm, rpmbuild...
        must_run(
            ["buildah", "from", "--name", name, self.cfg.raw["system"]["base_image"]]
        )
        try:
            must_run(
                ["buildah", "run", name, "dnf", "install", "-y", "rpm-build", "cpio"]
            )
            must_run(["buildah", "copy", name, str(srpm), "/root/"])
            must_run(
                [
                    "buildah",
                    "run",
                    name,
                    "rpm2cpio",
                    f"/root/{srpm.name}",
                    "|",
                    "cpio",
                    "-idm",
                ]
            )
            # apply USE flags and make_conf here...
            # then rpmbuild inside container...
            # finally mount & extract .rpm files to bd
        finally:
            run(["buildah", "rm", name])
        # record state
        self.state["built"][name] = {"ver": info["version"], "rel": info["release"]}
        self._save_state()

    def rebuild_all(self):
        # fetch installed list
        out = run(
            ["dnf", "repoquery", "--installed", "--qf", "%{name}"],
            stdout=subprocess.PIPE,
            text=True,
        )
        for pkg in out.stdout.splitlines():
            if any(re.match(x, pkg) for x in self.cfg.raw["build"]["exclude"]):
                continue
            self.build_pkg(pkg)


# ─── CLI ──────────────────────────────────────────────────────────────────────
def main():
    logging.basicConfig(level=logging.INFO, format="%(message)s")
    if os.geteuid() != 0:
        print("Must run as root", file=sys.stderr)
        sys.exit(1)

    cfg = ConfigManager()
    src = SourceManager(cfg)
    bm = BuildManager(cfg, src)

    p = argparse.ArgumentParser(prog="source-fedora")
    sub = p.add_subparsers(dest="cmd", required=True)
    sub.add_parser("rebuild", help="rebuild all").add_argument(
        "--full", action="store_true"
    )
    b = sub.add_parser("build", help="build packages")
    b.add_argument("pkgs", nargs="+")
    args = p.parse_args()

    if args.cmd == "rebuild":
        bm.rebuild_all()
    elif args.cmd == "build":
        for pkg in args.pkgs:
            bm.build_pkg(pkg)


if __name__ == "__main__":
    main()
