#!/usr/bin/env zsh

# Fedora-specific FZF functions with proper error handling

# Detect system type helper
function is_atomic_desktop() {
    [[ -f /run/ostree-booted ]] && return 0 || return 1
}

# Comprehensive package management
function fzf-fedora-packages() {
    if is_atomic_desktop; then
        echo "ðŸ”· RPM-OSTree Layered Packages:"
        if (( $+commands[rpm-ostree] )); then
            rpm-ostree status --json 2>/dev/null | \
                jq -r '.deployments[0]["requested-packages"][]? // empty' 2>/dev/null | \
                sort -u | fzf --multi \
                --preview 'rpm -qi {} 2>/dev/null || dnf info {} 2>/dev/null || echo "Package info not available"' \
                --preview-window=right:50%:wrap \
                --header 'Layered Packages (rpm-ostree)' \
                --bind 'enter:execute(rpm -qi {} 2>/dev/null || dnf info {})'
        else
            echo "rpm-ostree not available"
        fi
        
        echo -e "\nðŸ”· Flatpak Applications:"
        if (( $+commands[flatpak] )); then
            flatpak list --app --columns=application 2>/dev/null | fzf --multi \
                --preview 'flatpak info {} 2>/dev/null || echo "Application info not available"' \
                --preview-window=right:50%:wrap \
                --header 'Flatpak Applications' \
                --bind 'enter:execute(flatpak info {})'
        else
            echo "Flatpak not available"
        fi
    else
        if (( $+commands[dnf] )); then
            dnf list installed 2>/dev/null | \
                awk 'NR>1 && NF>=3 {print $1}' | \
                sed 's/\.[^.]*$//' | \
                sort -u | fzf --multi \
                --preview 'dnf info {} 2>/dev/null || echo "Package info not available"' \
                --preview-window=right:50%:wrap \
                --header 'Installed DNF Packages' \
                --bind 'enter:execute(dnf info {})'
        else
            echo "DNF not available"
        fi
    fi
}

# Search available packages
function fzf-fedora-search() {
    local query
    query="${1:-}"
    if [[ -z "$query" ]]; then
        echo "Usage: fzf-fedora-search <search_term>"
        return 1
    fi
    
    if ! (( $+commands[dnf] )); then
        echo "DNF not available"
        return 1
    fi
    
    if is_atomic_desktop; then
        echo "Searching for packages to layer with rpm-ostree..."
        dnf search "$query" 2>/dev/null | \
            grep -E '^[a-zA-Z0-9].*\..*:' | \
            awk '{print $1}' | \
            sed 's/\.[^.]*$//' | \
            sort -u | fzf --multi \
            --preview 'dnf info {} 2>/dev/null || echo "Package info not available"' \
            --preview-window=right:50%:wrap \
            --header "Available packages for: $query" \
            --bind 'enter:execute(dnf info {})'
    else
        dnf search "$query" 2>/dev/null | \
            grep -E '^[a-zA-Z0-9].*\..*:' | \
            awk '{print $1}' | \
            sed 's/\.[^.]*$//' | \
            sort -u | fzf --multi \
            --preview 'dnf info {} 2>/dev/null || echo "Package info not available"' \
            --preview-window=right:50%:wrap \
            --header "DNF Search Results: $query" \
            --bind 'enter:execute(dnf info {})'
    fi
}

# System update management
function fzf-fedora-updates() {
    if is_atomic_desktop; then
        if (( $+commands[rpm-ostree] )); then
            echo "ðŸ”„ Checking for rpm-ostree updates..."
            rpm-ostree upgrade --check 2>/dev/null | fzf \
                --preview 'rpm-ostree status' \
                --header 'RPM-OSTree System Updates' \
                --bind 'enter:execute(rpm-ostree status)'
        else
            echo "rpm-ostree not available"
        fi
    else
        if (( $+commands[dnf] )); then
            dnf check-update 2>/dev/null | \
                awk 'NR>1 && NF>=3 {print $1}' | \
                sed 's/\.[^.]*$//' | \
                sort -u | fzf --multi \
                --preview 'dnf info {} 2>/dev/null || echo "Package info not available"' \
                --preview-window=right:50%:wrap \
                --header 'Available DNF Updates' \
                --bind 'enter:execute(dnf info {})'
        else
            echo "DNF not available"
        fi
    fi
}

# Toolbox management (Atomic Desktop specific)
function fzf-fedora-toolbox() {
    if ! (( $+commands[toolbox] )); then
        echo "Toolbox is not installed. Install with: sudo dnf install toolbox"
        return 1
    fi
    
    local action
    action=$(echo -e "list\nenter\ncreate\nrm" | fzf --header 'Toolbox Actions')
    
    case "$action" in
        "list")
            toolbox list 2>/dev/null || echo "No toolbox containers found"
            ;;
        "enter")
            local container
            container=$(toolbox list --containers 2>/dev/null | \
                awk 'NR>1 && NF>=2 {print $2}' | fzf \
                --preview 'toolbox list --containers 2>/dev/null | grep {} || echo "Container info not available"' \
                --header 'Select Container to Enter')
            [[ -n "$container" ]] && toolbox enter "$container"
            ;;
        "create")
            echo -n "Enter container name: "
            read container_name
            [[ -n "$container_name" ]] && toolbox create "$container_name"
            ;;
        "rm")
            local container
            container=$(toolbox list --containers 2>/dev/null | \
                awk 'NR>1 && NF>=2 {print $2}' | fzf \
                --preview 'toolbox list --containers 2>/dev/null | grep {} || echo "Container info not available"' \
                --header 'Select Container to Remove')
            [[ -n "$container" ]] && toolbox rm "$container"
            ;;
    esac
}

# System service management
function fzf-fedora-services() {
    local service_type
    service_type=$(echo -e "user\nsystem" | fzf --header 'Service Type')
    
    local systemctl_cmd
    case "$service_type" in
        "user")
            systemctl_cmd="systemctl --user"
            ;;
        "system")
            systemctl_cmd="systemctl"
            ;;
        *)
            return 1
            ;;
    esac
    
    $systemctl_cmd list-units --type=service --all --no-pager --no-legend 2>/dev/null | \
        awk '{print $1}' | \
        grep '\.service$' | fzf --multi \
        --preview "$systemctl_cmd status {} 2>/dev/null || echo 'Service status not available'" \
        --preview-window=right:50%:wrap \
        --header "Systemd Services ($service_type)" \
        --bind "enter:execute($systemctl_cmd status {})"
}

# Repository management
function fzf-fedora-repos() {
    if ! (( $+commands[dnf] )); then
        echo "DNF not available"
        return 1
    fi
    
    dnf repolist --all 2>/dev/null | \
        awk 'NR>1 && NF>=2 {print $1}' | fzf \
        --preview 'dnf repoinfo {} 2>/dev/null || echo "Repository info not available"' \
        --preview-window=right:50%:wrap \
        --header 'DNF Repositories' \
        --bind 'enter:execute(dnf repoinfo {})'
}

# Kernel management (especially useful for Atomic Desktops)
function fzf-fedora-kernels() {
    if is_atomic_desktop; then
        if (( $+commands[rpm-ostree] )); then
            rpm-ostree status 2>/dev/null | \
                grep -E '^\*|^  ' | fzf \
                --preview 'rpm-ostree status' \
                --header 'OSTree Deployments' \
                --bind 'enter:execute(rpm-ostree status)'
        else
            echo "rpm-ostree not available"
        fi
    else
        if (( $+commands[dnf] )); then
            dnf list installed 'kernel*' 2>/dev/null | \
                awk 'NR>1 && NF>=3 {print $1}' | \
                sed 's/\.[^.]*$//' | \
                sort -u | fzf \
                --preview 'dnf info {} 2>/dev/null || echo "Package info not available"' \
                --preview-window=right:50%:wrap \
                --header 'Installed Kernels' \
                --bind 'enter:execute(dnf info {})'
        else
            echo "DNF not available"
        fi
    fi
}

# Container management (Podman integration)
function fzf-fedora-containers() {
    if ! (( $+commands[podman] )); then
        echo "Podman not available. Install with: sudo dnf install podman"
        return 1
    fi
    
    local action
    action=$(echo -e "ps\nimages\nvolumes\nnetworks" | fzf --header 'Container Resources')
    
    case "$action" in
        "ps")
            podman ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" 2>/dev/null | \
                awk 'NR>1 {print $1}' | fzf \
                --preview 'podman inspect {} 2>/dev/null || echo "Container info not available"' \
                --header 'Podman Containers'
            ;;
        "images")
            podman images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" 2>/dev/null | \
                awk 'NR>1 {print $1":"$2}' | fzf \
                --preview 'podman inspect {} 2>/dev/null || echo "Image info not available"' \
                --header 'Podman Images'
            ;;
        "volumes")
            podman volume ls --format "table {{.Name}}" 2>/dev/null | \
                awk 'NR>1 {print $1}' | fzf \
                --preview 'podman volume inspect {} 2>/dev/null || echo "Volume info not available"' \
                --header 'Podman Volumes'
            ;;
        "networks")
            podman network ls --format "table {{.Name}}" 2>/dev/null | \
                awk 'NR>1 {print $1}' | fzf \
                --preview 'podman network inspect {} 2>/dev/null || echo "Network info not available"' \
                --header 'Podman Networks'
            ;;
    esac
}
